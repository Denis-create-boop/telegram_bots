from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler

from gpt import *
from util import *


# —Ç—É—Ç –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –Ω–∞—à –∫–æ–¥ :)
async def start(update, context):
    dialog.mod = 'main'
    text = load_message('main')
    await send_photo(update, context, "main")
    await send_text(update, context, text)

    await show_main_menu(update, context, {
        'start': '–∑–∞–ø—É—Å—Ç–∏—Ç—å',
        'profile': '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–ª—è üòé',
        'opener': '—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞',
        'message': '–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà',
        'date': '–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•',
        'gpt': '–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†'
    })


async def gpt(update, context):
    dialog.mod = 'gpt'
    text = load_message('gpt')
    await send_photo(update, context, "gpt")
    await send_text(update, context, text)


async def gpt_dialog(update, context):
    text = update.message.text
    prompt = load_prompt('gpt')
    answer = await chatgpt.send_question(prompt, text)
    await send_text(update, context, answer)


async def date(update, context):
    dialog.mod = 'date'
    text = load_message('date')
    await send_photo(update, context, "date")
    await send_text_buttons(update, context, text, {
        "date_grande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
        "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
        "date_zendaya": "–ó–µ–Ω–¥–µ—è",
        "date_gosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
        "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏",
        "date_rianna": "–†–∏–∞–Ω–Ω–∞",
        "date_kruz": "–¢–æ–º –ö—Ä—É–∑"
    })


async def date_dialog(update, context):
    text = update.message.text
    my_message = await send_text(update, context, "–Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç...")
    answer = await chatgpt.add_message(text)
    await my_message.edit_text(answer)



async def date_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    await send_photo(update, context, query)
    await send_text(update, context, "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥–µ–≤—É—à–∫—É (–ø–∞—Ä–Ω—è) –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π")

    prompt = load_prompt(query)
    chatgpt.set_prompt(prompt)


async def message(update, context):
    dialog.mod = "message"
    text = load_message("message")
    await send_photo(update, context, "message")
    await send_text(update, context, text)
    await send_text_buttons(update, context, text, {
        'message_next': '–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        'message_date': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ'
    })
    dialog.list.clear()


async def message_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    prompt = load_prompt(query)
    user_chat_history = "\n\n".join(dialog.list)
    my_message = await send_text(update, context, "Chat gpt üß† –¥—É–º–∞–µ—Ç –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞...")
    answer = await chatgpt.send_question(prompt, user_chat_history)
    await my_message.edit_text(answer)


async def message_dialog(update, context):
    text = update.message.text
    dialog.list.append(text)


async def profile(update, context):
    dialog.mod = 'profile'
    text = load_message('profile')
    await send_photo(update, context, 'profile')
    await send_text(update, context, text)
    dialog.user.clear()
    dialog.count = 0
    await send_text(update, context, "–∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")


async def profile_dialog(update, context):
    text = update.message.text
    dialog.count += 1

    if dialog.count == 1:
        dialog.user["name"] = text
        await send_text(update, context, "–∫–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
    elif dialog.count == 2:
        dialog.user["age"] = text
        await send_text(update, context, "—Å–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    elif dialog.count == 3:
        dialog.user["occupation"] = text
        await send_text(update, context, "ü§°–∫–∞–∫–∏–µ —É –≤–∞—Å —Ö–æ–±–±–∏?")

    elif dialog.count == 4:
        dialog.user["hobby"] = text
        await send_text(update, context, "—á—Ç–æ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ª—é–¥—è—Ö?üò°")

    elif dialog.count == 5:
        dialog.user["annoys"] = text
        await send_text(update, context, "—Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞‚ù§Ô∏èüëÄ?")

    elif dialog.count == 6:
        dialog.user["goals"] = text

        prompt = load_prompt('profile')
        user_info = dialog_user_info_to_str(dialog.user)
        my_message = await send_text(update, context, "chat GPTüß† –∑–∞–Ω–∏–º–∞–µ—Ç—å—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        answer = await chatgpt.send_question(prompt, user_info)
        await my_message.edit_text(answer)


async def opener(update, context):
    dialog.mod = "opener"
    text = load_message('opener')
    await send_photo(update, context, 'opener')
    await send_text(update, context, text)

    dialog.user.clear()
    dialog.count = 0
    await send_text(update, context, "–∏–º—è –¥–µ–≤—É—à–∫–∏?")

async def opener_dialog(update, context):
    text = update.message.text
    dialog.count += 1

    if dialog.count == 1:
        dialog.user["name"] = text
        await send_text(update, context, "—Å–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?")

    elif dialog.count == 2:
        dialog.user["age"] = text
        await send_text(update, context, "–æ—Ü–µ–Ω–∏—Ç–µ –µ—ë –≤–Ω–µ—à–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10")

    elif dialog.count == 3:
        dialog.user["handsome"] = text
        await send_text(update, context, "–∫–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?")

    elif dialog.count == 4:
        dialog.user["occupation"] = text
        await send_text(update, context, "—Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")

    elif dialog.count == 5:
        dialog.user["goals"] = text

        prompt = load_prompt('opener')
        user_info = dialog_user_info_to_str(dialog.user)

        my_message = await send_text(update, context, "chat GPTüß† –∑–∞–Ω–∏–º–∞–µ—Ç—å—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ openera –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        answer = await chatgpt.send_question(prompt, user_info)
        await my_message.edit_text(answer)



async def hello(update, context):
    if dialog.mod == 'gpt':
        await gpt_dialog(update, context)
    elif dialog.mod == 'date':
        await date_dialog(update, context)
    elif dialog.mod == 'message':
        await message_dialog(update, context)
    elif dialog.mod == 'profile':
        await profile_dialog(update, context)
    elif dialog.mod == 'opener':
        await opener_dialog(update, context)

    else:

        await send_text(update, context, '*–ü—Ä–∏–≤–µ—Ç*')
        await send_text(update, context, '_–∫–∞–∫ –¥–µ–ª–∞?, —è –±–æ—Ç –ø–æ–º–æ—â—å–Ω–∏–∫)_')
        await send_text(update, context, '–≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—åüò∏')

        await send_photo(update, context, "avatar_main")
        await send_text_buttons(update, context, "–∫–∞–∫ –≤–∞–º –º–æ—è —Ä–∞–±–æ—Ç–∞?", {
            'good': '–û—Ç–ª–∏—á–Ω–æ',
            'bad': '–í—Å—ë –ø–ª–æ—Ö–æ'
        })


async def hello_button(update, context):
    query = update.callback_query.data
    if query == 'good':
        await send_text(update, context, '*–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ —è –æ—á–µ–Ω—å —Ä–∞–¥ —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—åü•∞üòá*')
    else:
        await send_text(update, context, '*–°–ø–∞—Å–∏–±–æ —è —É—á—Ç—É –≤–∞—à–µ –º–Ω–µ–Ω–∏–µüòí*')


dialog = Dialog()
dialog.mod = None
dialog.list = []
dialog.count = 0
dialog.user = {}

chatgpt = ChatGptService(token="gpt:1EprHW2fyrbq2MNxmQbRJFkblB3TJuC8zKn6VeGdT0tnEKbw")

app = ApplicationBuilder().token("7451810995:AAHbfdoXLlbTSVYwi1RjxJbV5F5qVlOBmrM").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("date", date))
app.add_handler(CommandHandler("message", message))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("opener", opener))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))

app.add_handler(CallbackQueryHandler(date_button, pattern="^date_.*"))
app.add_handler(CallbackQueryHandler(message_button, pattern="^message_.*"))
app.add_handler(CallbackQueryHandler(hello_button))


app.run_polling()
