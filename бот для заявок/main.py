# –±–æ—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ –∫–∞–∫–∏–º –ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º–∞–º —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å–æ –≤—Ö–æ–¥–æ–º –∏ —Ä–∞–±–æ—Ç–æ–π,
# –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—É, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏
# –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
# —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ @DVP_Voronezhbot –æ–Ω–∞ –∂–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

from admin import *
from master import master, id_master


users = None


@bot.message_handler(
    func=lambda message: str(message.text).lower() == "start"
    or message.text == "/start"
)
def wellcome(message):
    global id_user
    chat_id = message.chat.id

    if chat_id == id_admin:
        id_user = id_admin
        admin(message)

    elif chat_id == id_master:
        id_user = id_master
        master(message)

    else:
        keyboard = telebot.types.ReplyKeyboardMarkup()

        for button in user_buttons:
            button_save = telebot.types.InlineKeyboardButton(text=button)
            keyboard.add(button_save)
        with open("images/avatar_main.jpg", "rb") as photo:
            bot.send_media_group(chat_id, [InputMediaPhoto(photo)])
        bot.send_message(
            chat_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –î–í–ü –í–æ—Ä–æ–Ω–µ–∂ –¶–û", reply_markup=keyboard
        )


@bot.message_handler(func=lambda message: message.text in user_handlers)
# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
def cant_connect(message):
    global application, photo, flag
    application = message.text
    chat_id = message.chat.id
    if application == "üî•üî•ü§Ø–û—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Çü§Øüî•üî•":
        bot.send_message(
            chat_id,
            "–ö–∞–∫–æ–π —É–∂–∞—Å üò±üò±\n–°–µ–π—á–∞—Å –º—ã –≤—Å–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ä–µ—à–∏–ºüßê\n –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω",
        )
        bot.register_next_step_handler(message, save_application)
    elif (
        application == "üì©–ù–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –≤ –ø–æ—á—Ç—Éüì©"
        or application == "‚òÅÔ∏è–ù–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª‚òÅÔ∏è"
        or application == "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–øü§¨ü§¨"
    ):
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω")
        bot.register_next_step_handler(message, save_application)
    elif application == "–î—Ä—É–≥–æ–µ":
        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —É –≤–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–æ")
        application = message.text
        bot.register_next_step_handler(message, cant_connect)
    elif str(application).lower() == "start":
        wellcome(message)
    else:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω")
        bot.register_next_step_handler(message, save_application)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –¥—Ä—É–≥–æ–π –ø—Ä–æ–±–ª–µ–º—ã
def another(message):
    global application
    application = message.text
    bot.register_next_step_handler(message, cant_connect)


# –∑–∞–ø–∏—Å—å –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Å—Ç–µ—Ä—É
def save_application(message):
    global application, users, photo, flag
    if message.text == "/start" or message.text == "start":
        wellcome(message)
    else:
        chat_id = message.chat.id
        users = chat_id
        text = message.text
        if (
            text not in user_buttons
            and text not in admin_buttons
            and text not in master_buttons
        ):
            name = message.text
            objects = Applications(
                name, seves_problems[application], "–≤ –æ–∂–∏–¥–∞–Ω–∏–∏", chat_id
            )
            number = objects.write_application()
            bot.send_message(
                chat_id,
                f"""–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ {number}\n
–í—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —ç—Ç–æ–º –±–æ—Ç–µ""",
            )
            send_master(name, number, chat_id)
        else:

            bot.send_message(
                chat_id,
                "–í–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è",
            )


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—É
def send_master(name, number, id_quest):
    global application
    bot.send_message(
        id_master, f"–ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä {number}, –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}\n\n{application}"
    )
    buttons = ["–ó–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª", "–í —Ä–∞–±–æ—Ç–µ", "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"]
    keyboard = telebot.types.ReplyKeyboardMarkup()
    for button in buttons:
        button_save = telebot.types.InlineKeyboardButton(text=button)
        keyboard.add(button_save)
    bot.send_message(id_master, "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", reply_markup=keyboard)
    answers = {
        "ok": "–ó–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª",
        "process": "–í —Ä–∞–±–æ—Ç–µ",
        "got": "–í—ã–ø–æ–ª–Ω–µ–Ω–∞",
    }

    @bot.message_handler(func=lambda message: message.text in answers.values())
    def send_answer(message):
        answer = message.text
        objects = Applications()

        def menu():
            global id_master
            keyboard = telebot.types.ReplyKeyboardMarkup()
            buttons = [
                "start",
                "–ó–∞—è–≤–∫—É –≤—ã–ø–æ–ª–Ω–∏–ª",
                "–ü–µ—Ä–µ–¥–∞–ª –∑–∞—è–≤–∫—É –¥—Ä—É–≥–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É",
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É",
            ]
            for button in buttons:
                button_save = telebot.types.InlineKeyboardButton(text=button)
                keyboard.add(button_save)
            bot.send_message(
                id_master,
                "–°–ø–∞—Å–∏–±–æ –ø–µ—Ä–µ–¥–∞–º",
                reply_markup=keyboard,
            )

        menu()

        if answer == "–ó–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª":
            objects.set_new_status(number, "–ü–µ—Ä–µ–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É")
            objects.set_master_id(number, id_master)
            bot.send_message(
                id_quest,
                "–í–∞—à—É –∑–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É",
            )
        elif answer == "–í —Ä–∞–±–æ—Ç–µ":
            objects.set_new_status(number, "–í —Ä–∞–±–æ—Ç–µ")
            bot.send_message(
                id_quest,
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ—à–µ–Ω–∏—è",
            )
        elif answer == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
            bot.send_message(id_quest, "–í–∞—Å –≤–æ–ø—Ä–æ—Å —É–∂–µ —Ä–µ—à–µ–Ω, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞")

            objects.set_new_status(number, "–í—ã–ø–æ–ª–Ω–µ–Ω–∞")

        bot.register_next_step_handler(message, wellcome)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏üëÄ")
def get_status(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏")
    bot.register_next_step_handler(message, show_status)


def show_status(message):
    chat_id = message.chat.id
    status = message.text
    objects = Applications()
    bot.send_message(chat_id, f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ - {objects.get_status(status)[0]}")


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling(none_stop=True, interval=0)
