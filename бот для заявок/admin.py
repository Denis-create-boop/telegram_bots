import telebot
from my_database import Applications
from telebot.types import InputMediaPhoto


TOKEN = "8018531675:AAHnItWE4t-ujEqPFe-0vCaFggdeY017re0"
bot = telebot.TeleBot(TOKEN)


id_admin = 5276576528
user_id = None
old_number = 0

admin_buttons = [
    "start",
    "üëÅ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏üëÅ",
    "–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏",
    "—É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É",
    "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫—É –∑–∞—è–≤–∫–∏",
    "üì©–ù–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –≤ –ø–æ—á—Ç—Éüì©",
    "‚òÅÔ∏è–ù–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª‚òÅÔ∏è",
    "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–øü§¨ü§¨",
    "üî•üî•ü§Ø–û—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Çü§Øüî•üî•",
    "–î—Ä—É–≥–æ–µ",
    "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏üëÄ",
]

user_buttons = [
    "start",
    "üì©–ù–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –≤ –ø–æ—á—Ç—Éüì©",
    "‚òÅÔ∏è–ù–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª‚òÅÔ∏è",
    "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–øü§¨ü§¨",
    "üî•üî•ü§Ø–û—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Çü§Øüî•üî•",
    "–î—Ä—É–≥–æ–µ",
    "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏üëÄ",
]

user_handlers = [
    "start",
    "üì©–ù–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –≤ –ø–æ—á—Ç—Éüì©",
    "‚òÅÔ∏è–ù–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª‚òÅÔ∏è",
    "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–øü§¨ü§¨",
    "üî•üî•ü§Ø–û—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Çü§Øüî•üî•",
    "–î—Ä—É–≥–æ–µ",
]

master_buttons = [
    "start",
    "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏",
    "–ó–∞—è–≤–∫—É –≤—ã–ø–æ–ª–Ω–∏–ª",
    "–ü–µ—Ä–µ–¥–∞–ª –∑–∞—è–≤–∫—É –¥—Ä—É–≥–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É",
    "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É",
]

master_handlers = [
    "start",
    "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏",
    "–ó–∞—è–≤–∫—É –≤—ã–ø–æ–ª–Ω–∏–ª",
    "–ü–µ—Ä–µ–¥–∞–ª –∑–∞—è–≤–∫—É –¥—Ä—É–≥–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É",
    "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É",
]

seves_problems = {
    "start": "start",
    "üëÅ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏üëÅ": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏",
    "–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏": "–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏",
    "—É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É": "—É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É",
    "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫—É –∑–∞—è–≤–∫–∏": "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫—É –∑–∞—è–≤–∫–∏",
    "üì©–ù–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –≤ –ø–æ—á—Ç—Éüì©": "–ù–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –≤ –ø–æ—á—Ç—É",
    "‚òÅÔ∏è–ù–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª‚òÅÔ∏è": "–ù–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª",
    "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–øü§¨ü§¨": "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–ø",
    "üî•üî•ü§Ø–û—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Çü§Øüî•üî•": "–û—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
    "–î—Ä—É–≥–æ–µ": "–î—Ä—É–≥–æ–µ",
    "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏üëÄ": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏",
    "–ó–∞—è–≤–∫—É –≤—ã–ø–æ–ª–Ω–∏–ª": "–ó–∞—è–≤–∫—É –≤—ã–ø–æ–ª–Ω–∏–ª",
    "–ü–µ—Ä–µ–¥–∞–ª –∑–∞—è–≤–∫—É –¥—Ä—É–≥–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É": "–ü–µ—Ä–µ–¥–∞–ª –∑–∞—è–≤–∫—É –¥—Ä—É–≥–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É",
    "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É": "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É",
}

# admin
def admin(message):

    @bot.message_handler(
        func=lambda message: str(message.text).lower() == "start"
        or message.text == "/start"
    )
    def wellcome(message):

        global admin_buttons, photo
        chat_id = message.chat.id
        keyboard = telebot.types.ReplyKeyboardMarkup()

        for button in admin_buttons:
            button_save = telebot.types.InlineKeyboardButton(text=button)
            keyboard.add(button_save)
        with open("images/avatar_main.jpg", "rb") as photo:
            bot.send_media_group(chat_id, [InputMediaPhoto(photo)])
        bot.send_message(
            chat_id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –î–í–ü –í–æ—Ä–æ–Ω–µ–∂ –¶–û",
            reply_markup=keyboard
        )

    # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –∑–∞—è–≤–∫–∏
    @bot.message_handler(
        func=lambda message: message.text == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫—É –∑–∞—è–≤–∫–∏"
    )
    def show_drade(message):
        chat_id = message.chat.id

        def get_number(message):
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏")
            bot.register_next_step_handler(message, get_grade)

        def get_grade(message):
            number = message.text
            objects = Applications()
            grade = objects.get_grade(number)
            bot.send_message(chat_id, f"–û—Ü–µ–Ω–∫–∞ –∑–∞—è–≤–∫–∏ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {number} - {grade}")

        get_number(message)

    # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
    @bot.message_handler(func=lambda message: message.text == "üëÅ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏üëÅ")
    def show_all(message):
        chat_id = message.chat.id
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏")
        bot.register_next_step_handler(message, show_for_month)

    def show_for_month(message):
        chat_id = message.chat.id
        month = message.text
        try:
            objects = Applications()
            objects = objects.show_all(month)
            ls_answer = ["id", "–¥–∞—Ç–∞", "–≤—Ä–µ–º—è", "–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", "–ª–æ–≥–∏–Ω", "–ø—Ä–æ–±–ª–µ–º–∞", "—Å—Ç–∞—Ç—É—Å", "–æ—Ü–µ–Ω–∫–∞", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "id_master"]
            ls_send = []
            for row in objects:
                send = ""
                for i in range(len(ls_answer)):
                    send += f"{ls_answer[i]}: {row[i]}\n"
                ls_send.append(send)
            for i in ls_send:
                bot.send_message(chat_id, i)
        except:
            bot.send_message(chat_id, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –Ω–µ—Ç –Ω–∏–æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏")

    # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
    @bot.message_handler(func=lambda message: message.text == "–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
    def change_status(message):
        global old_number
        chat_id = message.chat.id
        objects = Applications()
        old_status = ""

        status_buttons = [
            "–í —Ä–∞–±–æ—Ç–µ",
            "–ü–µ—Ä–µ–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É",
            "–í—ã–ø–æ–ª–Ω–µ–Ω–∞",
            "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É",
        ]
        keyboard = telebot.types.ReplyKeyboardMarkup()
        for button in status_buttons:
            button_save = telebot.types.InlineKeyboardButton(text=button)
            keyboard.add(button_save)

        def get_number(message):
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏")
            bot.register_next_step_handler(message, check_status)

        def check_status(message):
            global old_status, old_number
            NUM = message.text
            checks_status = objects.get_status(int(NUM))
            if checks_status[0] == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
                bot.send_message(
                    chat_id,
                    "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É —ç—Ç–æ–π –∑–∞—è–≤–∫–∏ —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                )
            else:
                num = message.text
                old_number = num
                old_status = objects.get_status(num)
                bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", reply_markup=keyboard)
                bot.register_next_step_handler(message, set_new_status)

        def set_new_status(message):
            global admin_buttons, user_id, old_number, old_status
            nonlocal objects

            new_keyboard = telebot.types.ReplyKeyboardMarkup()
            for button in admin_buttons:
                button_save = telebot.types.InlineKeyboardButton(text=button)
                new_keyboard.add(button_save)

            new_status = message.text
            objects.set_new_status(old_number, new_status)
            user_id = objects.get_user_id(old_number)
            bot.send_message(
                chat_id,
                f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–æ–º–µ—Ä {old_number}\n–ò–∑–º–µ–Ω–µ–Ω —Å:\n{old_status[0]}\n–Ω–∞:\n{new_status}",
                reply_markup=new_keyboard,
            )

            if new_status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
                user_id = objects.get_user_id(old_number)
                grade_keyboard = telebot.types.ReplyKeyboardMarkup()
                grade_buttons = ["10", "9", "8", "7", "6", "5", "4", "3", "2", "1"]
                for button in grade_buttons:
                    button_save = telebot.types.InlineKeyboardButton(text=button)
                    grade_keyboard.add(button_save)
                bot.send_message(
                    user_id,
                    f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {old_number} - –í—ã–ø–æ–ª–Ω–µ–Ω–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –æ—Ç 1 –¥–æ 10",
                    reply_markup=grade_keyboard,
                )

        get_number(message)

    @bot.message_handler(func=lambda message: message.text == "—É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É")
    # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏–∑ –±–¥
    def delete_questions(message):
        number = 0
        objects = Applications()

        def start_delete(message):
            chat_id = message.chat.id
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏")
            bot.register_next_step_handler(message, answer_are_ready)

        def answer_are_ready(message):
            nonlocal number, objects
            chat_id = message.chat.id
            number = message.text
            answer_bd = objects.get_application(number)
            ls_answer = []
            for row in answer_bd:
                ls_answer.append(row)

            if ls_answer:
                bot.send_message(
                    chat_id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–æ–º–µ—Ä {number}?"
                )
                ls_send = [
                    "id",
                    "–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏",
                    "–ª–æ–≥–∏–Ω",
                    "–ø—Ä–æ–±–ª–µ–º–∞",
                    "—Å—Ç–∞—Ç—É—Å",
                    "–æ—Ü–µ–Ω–∫–∞",
                ]
                send_answer = ""
                for row in ls_answer:
                    for i in range(len(ls_send)):
                        send_answer += f"{ls_send[i]}: {row[i]}\n"
                bot.send_message(chat_id, send_answer)
                bot.send_message(chat_id, "–¥–∞\\–Ω–µ—Ç")

                bot.register_next_step_handler(message, delete_or_not)
            else:
                bot.send_message(
                    chat_id,
                    "–¢–∞–∫–æ–π –∑–∞—è–≤–∫–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏",
                )

        def delete_or_not(message):
            nonlocal number, objects
            chat_id = message.chat.id
            if str(message.text).lower() == "–Ω–µ—Ç":
                bot.send_message(chat_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            elif str(message.text).lower() == "–¥–∞":
                objects.del_application(number)
                bot.send_message(
                    chat_id, f"–ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä {number}, —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
                )
            else:
                bot.send_message(
                    chat_id,
                    "–ù–µ —Å–æ–≤—Å–µ–º –≤–∞—Å –ø–æ–Ω—è–ª\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞ - –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É\n–Ω–µ—Ç - –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ",
                )
                bot.register_next_step_handler(message, delete_or_not)

        start_delete(message)

    wellcome(message)

    @bot.message_handler(
        func=lambda message: message.text
        in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
    )
    def send_answer(message):
        global user_id, user_buttons
        grade = int(message.text)

        keyboard = telebot.types.ReplyKeyboardMarkup()

        for button in user_buttons:
            button_save = telebot.types.InlineKeyboardButton(text=button)
            keyboard.add(button_save)
        if grade > 6:
            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É", reply_markup=keyboard)
        else:
            bot.send_message(
                user_id,
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É, –º—ã –ø–æ—Å—Ç–æ—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å –Ω–∞—à–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                reply_markup=keyboard,
            )
        objects = Applications()
        user_id = objects.get_user_id(old_number)
        objects.set_grade(old_number, grade)
        bot.register_next_step_handler(message, wellcome)
